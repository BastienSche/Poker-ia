"""
Interpr√©teur IA pour analyser les r√©sultats de Google Vision API
Utilise une IA g√©n√©rative pour transformer le texte brut en donn√©es structur√©es de poker
"""
import os
import asyncio
from typing import Dict, List, Any, Optional
from dotenv import load_dotenv
from emergentintegrations.llm.chat import LlmChat, UserMessage

# Charger les variables d'environnement
load_dotenv()

class AIPokerInterpreter:
    """Interpr√®te intelligemment les r√©sultats OCR pour le poker"""
    
    def __init__(self):
        self.api_key = os.environ.get('EMERGENT_LLM_KEY')
        if not self.api_key:
            raise ValueError("EMERGENT_LLM_KEY non trouv√©e dans les variables d'environnement")
        
        print(f"ü§ñ AI Interpreter initialis√© avec cl√©: ***{self.api_key[-4:]}")
        
        # Syst√®me prompt sp√©cialis√© pour le poker
        self.system_prompt = """Tu es un expert en analyse de donn√©es de poker OCR. 

TON R√îLE:
- Analyser le texte brut d√©tect√© par Google Vision API sur des tables de poker
- Identifier et corriger les erreurs d'OCR courantes
- Extraire les cartes de poker du texte d√©sordonn√©
- Distinguer les cartes du h√©ros vs cartes communes (board)
- Retourner des donn√©es JSON parfaitement structur√©es

CARTES DE POKER:
- Rangs: A, K, Q, J, T (10), 9, 8, 7, 6, 5, 4, 3, 2
- Couleurs: S (‚ô†), H (‚ô•), D (‚ô¶), C (‚ô£)
- Format: "AS" = As de Pique, "KH" = Roi de C≈ìur

ERREURS OCR COURANTES √Ä CORRIGER:
- "‚óÜ" ‚Üí "D" (Diamant)
- "‚ô¶" ‚Üí "D" (Diamant)  
- "‚ô†" ‚Üí "S" (Pique)
- "‚ô•" ‚Üí "H" (C≈ìur)
- "‚ô£" ‚Üí "C" (Tr√®fle)
- "10" ‚Üí "T" (Dix)
- "0" ‚Üí "O" puis "Q" (confusion OCR)
- "1" ‚Üí "I" puis "J" (confusion OCR)

R√âPONSE REQUISE:
Retourne SEULEMENT un JSON valide dans ce format exact:
{
  "hero_cards": ["AS", "KH"],
  "community_cards": ["QD", "JC", "TS"],
  "confidence": 0.9,
  "interpretation_notes": "Texte explicatif de ce qui a √©t√© interpr√©t√©",
  "corrections_made": ["‚óÜ corrig√© en D", "‚ô• corrig√© en H"]
}

IMPORTANT: Si tu ne peux pas identifier de cartes, retourne des listes vides [] mais garde la structure JSON."""
    
    async def interpret_ocr_results(self, ocr_text: str, phase_hint: str, position_info: List[Dict] = None) -> Dict[str, Any]:
        """
        Interpr√®te les r√©sultats OCR avec l'IA g√©n√©rative
        
        Args:
            ocr_text: Texte brut de Google Vision API
            phase_hint: Phase du jeu (preflop, flop, turn, river)
            position_info: Informations de position des textes d√©tect√©s
            
        Returns:
            Dict avec cartes structur√©es et m√©tadonn√©es
        """
        try:
            print(f"ü§ñ === INTERPR√âTATION IA === Phase: {phase_hint}")
            print(f"üìù Texte √† analyser: '{ocr_text[:200]}...'")
            
            # Cr√©er le chat LLM
            chat = LlmChat(
                api_key=self.api_key,
                session_id=f"poker_ocr_{phase_hint}",
                system_message=self.system_prompt
            ).with_model("openai", "gpt-4o-mini")  # Mod√®le rapide et efficace
            
            # Construire le prompt d'analyse
            analysis_prompt = self.build_analysis_prompt(ocr_text, phase_hint, position_info)
            
            # Envoyer √† l'IA
            user_message = UserMessage(text=analysis_prompt)
            
            print("üöÄ Envoi √† l'IA g√©n√©rative...")
            response = await chat.send_message(user_message)
            
            print(f"ü§ñ R√©ponse IA re√ßue: {len(response)} caract√®res")
            
            # Parser la r√©ponse JSON
            parsed_result = self.parse_ai_response(response)
            
            print(f"‚úÖ IA INTERPR√âTATION: Hero={len(parsed_result.get('hero_cards', []))}, Board={len(parsed_result.get('community_cards', []))}")
            
            return parsed_result
            
        except Exception as e:
            print(f"‚ùå Erreur interpr√©tation IA: {e}")
            return self.get_fallback_interpretation(ocr_text, phase_hint)
    
    def build_analysis_prompt(self, ocr_text: str, phase_hint: str, position_info: List[Dict] = None) -> str:
        """Construit le prompt d'analyse pour l'IA"""
        
        expected_cards = {
            'preflop': {'hero': 2, 'board': 0},
            'flop': {'hero': 2, 'board': 3},
            'turn': {'hero': 2, 'board': 4},
            'river': {'hero': 2, 'board': 5}
        }
        
        expected = expected_cards.get(phase_hint, {'hero': 2, 'board': 0})
        
        prompt = f"""ANALYSE CE TEXTE OCR D'UNE TABLE DE POKER:

TEXTE BRUT D√âTECT√â:
"{ocr_text}"

CONTEXTE:
- Phase de jeu: {phase_hint}
- Cartes h√©ros attendues: {expected['hero']}
- Cartes board attendues: {expected['board']}

INFORMATIONS SUPPL√âMENTAIRES:"""
        
        if position_info:
            prompt += f"""
POSITIONS DES TEXTES D√âTECT√âS:
"""
            for i, pos in enumerate(position_info[:10]):  # Limiter √† 10
                text = pos.get('text', '')
                x = pos.get('x', 0)
                y = pos.get('y', 0)
                prompt += f"  - '{text}' √† position ({x:.0f}, {y:.0f})\n"
        
        prompt += f"""

T√ÇCHE:
1. Identifie toutes les cartes de poker dans ce texte
2. Corrige les erreurs d'OCR courantes (‚óÜ‚ÜíD, ‚ô•‚ÜíH, etc.)
3. S√©pare les cartes h√©ros (g√©n√©ralement en bas) des cartes communes (g√©n√©ralement au centre)
4. Pour {phase_hint}: attends {expected['hero']} cartes h√©ros et {expected['board']} cartes board

RETOURNE UNIQUEMENT LE JSON STRUCTUR√â (pas d'explication suppl√©mentaire)."""
        
        return prompt
    
    def parse_ai_response(self, response: str) -> Dict[str, Any]:
        """Parse la r√©ponse JSON de l'IA"""
        try:
            import json
            
            # Nettoyer la r√©ponse (enlever markdown, etc.)
            cleaned = response.strip()
            
            # Si la r√©ponse contient ```json, l'extraire
            if "```json" in cleaned:
                start = cleaned.find("```json") + 7
                end = cleaned.find("```", start)
                if end != -1:
                    cleaned = cleaned[start:end].strip()
            elif "```" in cleaned:
                start = cleaned.find("```") + 3
                end = cleaned.find("```", start)
                if end != -1:
                    cleaned = cleaned[start:end].strip()
            
            # Parser le JSON
            parsed = json.loads(cleaned)
            
            # Valider la structure
            required_keys = ['hero_cards', 'community_cards', 'confidence']
            for key in required_keys:
                if key not in parsed:
                    parsed[key] = [] if 'cards' in key else 0.0
            
            # Valider les cartes
            parsed['hero_cards'] = self.validate_cards(parsed.get('hero_cards', []))
            parsed['community_cards'] = self.validate_cards(parsed.get('community_cards', []))
            
            return parsed
            
        except Exception as e:
            print(f"‚ùå Erreur parsing r√©ponse IA: {e}")
            print(f"R√©ponse brute: {response[:200]}...")
            
            return {
                "hero_cards": [],
                "community_cards": [],
                "confidence": 0.0,
                "interpretation_notes": f"Erreur parsing: {str(e)}",
                "corrections_made": [],
                "parse_error": True
            }
    
    def validate_cards(self, cards: List[str]) -> List[str]:
        """Valide et nettoie une liste de cartes"""
        valid_ranks = ['A', 'K', 'Q', 'J', 'T', '9', '8', '7', '6', '5', '4', '3', '2']
        valid_suits = ['S', 'H', 'D', 'C']
        
        validated = []
        
        for card in cards:
            if not isinstance(card, str) or len(card) != 2:
                continue
                
            rank, suit = card[0].upper(), card[1].upper()
            
            if rank in valid_ranks and suit in valid_suits:
                validated.append(f"{rank}{suit}")
        
        return validated
    
    def get_fallback_interpretation(self, ocr_text: str, phase_hint: str) -> Dict[str, Any]:
        """Interpr√©tation de fallback si l'IA √©choue"""
        
        print("üîÑ Fallback: Interpr√©tation basique sans IA")
        
        # Extraction basique avec regex
        import re
        
        # Chercher patterns de cartes
        card_pattern = r'([AKQJT2-9]|10)([‚ô†‚ô•‚ô¶‚ô£SHDC])'
        matches = re.findall(card_pattern, ocr_text.upper())
        
        basic_cards = []
        for rank, suit in matches:
            # Corrections basiques
            if suit == '‚ô†': suit = 'S'
            elif suit == '‚ô•': suit = 'H'
            elif suit == '‚ô¶': suit = 'D'
            elif suit == '‚ô£': suit = 'C'
            elif rank == '10': rank = 'T'
            
            if len(rank) == 1 and len(suit) == 1:
                basic_cards.append(f"{rank}{suit}")
        
        # R√©partition basique
        expected_board = {'preflop': 0, 'flop': 3, 'turn': 4, 'river': 5}.get(phase_hint, 0)
        
        hero_cards = basic_cards[:2] if len(basic_cards) >= 2 else basic_cards
        board_cards = basic_cards[2:2+expected_board] if len(basic_cards) > 2 else []
        
        return {
            "hero_cards": hero_cards,
            "community_cards": board_cards,
            "confidence": 0.3,  # Confiance faible
            "interpretation_notes": "Fallback: Extraction regex basique sans IA",
            "corrections_made": ["Utilis√© extraction basique"],
            "fallback_used": True
        }

# Instance globale
ai_interpreter = AIPokerInterpreter()

def get_ai_interpreter():
    """Retourne l'instance de l'interpr√©teur IA"""
    return ai_interpreter